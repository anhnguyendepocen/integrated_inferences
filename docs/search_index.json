[["justifying-models.html", "Chapter 15 Justifying models 15.1 Nothing from nothing 15.2 Justifying the classic process tracing tests 15.3 Justification from experimental designs 15.4 Causal discovery", " Chapter 15 Justifying models We outline strategies to reduce reliance on unfounded beliefs about the probative value of clues. The approach we have described to inference always involve updating beliefs given data. But to get off the ground researchers need to be able to state priors on all parameters. The problem of stating priors for process tracing inferences can be more fundamental than for many Bayesian applications for two reasons. First the beliefs are beliefs over the distribution of individual level effects and not just the beliefs over average effects. This puts us up against the fundamental problem of causal inference (Holland cite, Dawid cite Flag!. Second, the beliefs can do a lot of workespecially in small \\(n\\) applications. Indeed for case level queries inferences might be little more than conditional applications of a model. We see two broad responses to this problem. One is emphasize the contingent nature of claims. As we outlined in Chapter 4, some causal models might reasonably reflect actual beliefs about the worldfor example one might, be convinced that a treatment was randomly assigned, that there is no interference, and that units are independently sampled from a distribution of types. All of these beliefs may be unwise, of course. But if held, then the simple \\(X \\rightarrow Y\\) DAG in chapter 4 (FIGURE REF) is more of a representation of beliefs about the world than it is a model of the world, in the sense of a simplified representation.1 But as we noted in Chapter 4, for an even modestly more complex situation, it seems inevitable that the model being used is unquestionably a model and hard to think of as a faithful summary of beliefs. Recognizing that we are generally dealing with models results in a useful reposing of the question: the question becomes not whether the assumptions are correct but whether the model is useful for some purpose (Clarke and Primo 2012). That is the subject of Chapter 15. A second approach is to justify a process tracing model by claiming exchangeability with units for which we have a lower level model. In a sense, this approach pushes the question down a level, since the lower level model itself needs to be justified. There are two further responses to this concern. One is to justify the lower level model with data or a combination of data and theory. We discuss this approach here. Another is to assess the importance of DAG assumptions  which we address in Chapter 16. 15.1 Nothing from nothing We now share a more negative result. Say you had access to large amounts of observational data on \\(X\\), \\(Y\\) and \\(M\\), but beyond knowing the temporal order of \\(X, Y, M\\), you do now know the graph. Can you figure out whether \\(M\\) is informative for \\(X\\) causes \\(Y\\) from this data? Table 15.1: Conditional inferences from an update agnostic model given a true model in which \\(X\\) causes \\(M\\) and \\(M\\) causes \\(Y\\) Query Given Using mean sd Q 1 - posteriors 0.398 0.092 Q 1 M==0 posteriors 0.395 0.125 Q 1 M==1 posteriors 0.400 0.130 This example illustrates the Cartwight idea we pointed to in Chapter 2: no causes in, no causes out Cartwright and others (1994). 15.2 Justifying the classic process tracing tests We start by establishing the possibility of justification. Recall the four classical qualitative tests described by Collier (2011) and drawing on Van Evera (1997) : are smoking gun tests, hoop tests, doubly decisive tests, and straw-in-the-wind tests. A hoop test is one which, if failed, bodes especially badly for a claim; a smoking gun test is one that bodes well for a hypothesis if passed; a doubly decisive test is strongly conclusive no matter what is found, and a straw-in-the-wind test is suggestive, though not conclusive, either way. In some treatments (such as Humphreys and Jacobs (2015)), formalization involves specifying a prior that a hypothesis is true and an independent set of beliefs about the probability of seeing some data if the hypothesis is true and if it is false. Then updating proceeds using Bayes rule. This simple approach suffers from two related weaknesses however: first, there is no good reason to expect these probabilities to be independent; second, there is nothing in the set-up to indicate how beliefs around the probative value of clues can be established or justified. Both of these problems are resolvable if the problem is articulated using fully specified causal models. We illustrate first by using an idealized example to show that a case level doubly decisive test can be justified by population data from factorial designs. Say we have from oberving just \\(X\\) and \\(Y\\) that \\(\\Pr(Y=1|X=1) = \\Pr(Y=1|X=0) = .5\\). Here we have an average treatment effect of 0. We are interested in a particular case with \\(X=1, Y=1\\) and specifically whether \\(X=1\\) caused \\(Y=1\\) in that case. The marginal information so far is consistent with a world in which \\(X\\) never affects \\(Y\\) and one in which \\(X\\) always affects \\(Y\\) (sometimes negatively, sometimes positively). Say now that we had data on \\(K\\) and found (a) that \\(K=1\\) arises with 50% probabilities, and (b) that the marginal distributions of \\(Y\\) given \\(X\\) and \\(K\\) are as follows: \\(\\Pr(Y=1|X=0, K = 0) = 1\\) \\(\\Pr(Y=1|X=1, K = 0) = .5\\) \\(\\Pr(Y=1|X=0, K = 1) = 0\\) \\(\\Pr(Y=1|X=1, K = 1) = .5\\) In that case we see that in cases in which \\(K=1\\), \\(X=0\\) is a necessary condition for \\(Y=1\\). So if \\(K=1\\) then certainly \\(X=1\\) caused \\(Y=1\\) (since, in that case, were \\(X\\) zero then certainly \\(Y\\) would be 0.) On the other hand were \\(K=0\\) then \\(X=0\\) woudl be a sufficient condition for \\(Y=1\\), which means that in this case \\(X=1\\) most certainly did not cause \\(Y=1\\). We have then that if \\(K=1\\) then certainly \\(X=1\\) caused \\(Y=1\\) whereas if \\(K=0\\) then certainly \\(X=1\\) did not cause \\(Y=1\\) This argument demonstrates that it is possible to justify a doubly decisive test on the basis of experimental dataprovided your case can be considered exchangeable with cases in the experimental data. Table 15.2 shows how this logic generalizes to different types of tests. Table 15.2: Known probabilities from a model with \\(X \\rightarrow Y \\leftarrow K\\) justifying classic test types for clue \\(K\\) given \\(X=Y=1\\). Doubly decisive Hoop Smoking gun Straw in the wind \\(\\Pr(K = 1)\\) 0.5 0.9 1 0.5 \\(\\Pr(Y=1 \\vert X=0, K = 0)\\) 1.0 1 4/9 0.6 \\(\\Pr(Y=1 \\vert X=1, K = 0)\\) 0.5 0.5 0.5 0.5 \\(\\Pr(Y=1 \\vert X=0, K = 1)\\) 0.0 0.44 0 0.4 \\(\\Pr(Y=1 \\vert X=1, K = 1)\\) 0.5 4/9 0.5 0.5 \\(\\Pr(X \\text{ causes }Y \\vert K=1)\\) 1.0 1 \\(\\Pr(X \\text{ causes }Y \\vert K=0)\\) 0.0 0 Flag! Put bounds in empty cells. Note hat some entries in Table 15.2 were given as ranges. This reflects that fact that unless we are at edge cases the estimand here is not identified even with infinite experimental data. In practice we expect never to be at these edges. Even still, the procedures given in Chapters XX above let us form posteriors over inferences with finite data. For the illustration we first make use of a function that generates data from a model with a constrained set of types for \\(Y\\) and a given prior distribution over clue \\(K\\). We then use a function that draws inferences, given different values of a clue \\(K\\), from a model that has been updated using available data. Note that the model that is updated has no constraints on \\(Y\\), has flat beliefs over the distribution of \\(K\\), and imposes no assumption that \\(K\\) is informative for how \\(Y\\) reacts to \\(X\\). We can now generate posterior beliefs, given \\(K\\), for different types of tests where the tests are now justified by different types of data, coupled with a common prior causal model. Results: Table 15.3: Classic tests with probative value inferred from (simulated) data Query Given Using Doubly decisive Hoop Smoking gun Straw in the Wind Test Q 1 - posteriors 0.489 0.451 0.536 0.469 (0.016) (0.022) (0.022) (0.022) Q 1 K==0 posteriors 0.009 0.044 0.493 0.301 (0.005) (0.028) (0.024) (0.029) Q 1 K==1 posteriors 0.976 0.494 0.9 0.637 (0.008) (0.023) (0.037) (0.03) We see that these tests all behave as expected. Importantly, however, the approach to thinking about the tests is quite different to that described in Collier (2011) or Humphreys and Jacobs (2015). Rather than having a belief about the probative value of a clue, and a prior over a hypothesis, inferences are drawn directly from a causal model that relates a clue to possible causal effects. Critically, with this approach, the inferences made from observing clues can be justified by reference to a more fundamental, agnostic model, that has been updated in light of data. The updated model yields both a prior over the proposition, belief about probative values, and guidance for what conclusions to draw given knowledge of \\(K\\). 15.3 Justification from experimental designs idea: show inferences given for example parallel designs for mediation 15.3.1 Mediator Say now that in addition we know from experimental data, that \\(K\\) mediates the relationship between \\(X\\) and \\(Y\\); indeed we will assume that we have a case of complete mediation, such that, conditional on \\(K\\), \\(Y\\) does not depend on \\(X\\). Say the transition matrices from \\(X\\) to \\(K\\) and \\(K\\) to \\(Y\\) are: \\[P^{xk}=\\left( \\begin{array}{cc} 1 &amp; 0 \\\\ 1/2 &amp; 1/2\\end{array}\\right), P^{ky}=\\left( \\begin{array}{cc} 1/2 &amp; 1/2 \\\\ 0 &amp; 1\\end{array}\\right)\\] Even without observing \\(K\\), this information is sufficient to place a prior on PC of \\(p=\\frac13\\). To see this, note that we can calculate: \\(\\lambda_a^K =0\\), \\(\\lambda_b^K = \\frac{1}{2}\\), \\(\\lambda_c^K = \\frac{1}{2}\\), \\(\\lambda_d^K = 0\\) \\(\\lambda_a^Y =0\\), \\(\\lambda_b^Y=\\frac{1}{2}\\), \\(\\lambda_c^Y=0\\), \\(\\lambda_d^Y=\\frac{1}{2}\\) and so: \\(\\lambda_b^u = \\lambda_b^K\\lambda_b^Y = \\frac{1}4\\) \\(\\lambda_d^u = \\lambda_d^Y\\) \\(p = \\frac{\\lambda_b^u}{\\lambda_b^u + \\lambda_d^u} = \\frac{1}3\\). whence: \\(\\phi_{b1} = 1\\) \\(\\phi_{d1} = \\lambda_d^K + \\lambda_b^K = \\frac{1}{2}\\) More generally we can calculate the lower bound on the probability that \\(X\\) caused \\(Y\\) as the product of the lower bounds that \\(X\\) caused \\(M\\) and that \\(M\\) caused \\(Y\\), and similarly for the upper bound, using the same formula as before. Signing things so that \\(\\tau^j\\geq 0\\), \\(j \\in {1,2}\\): \\[\\frac{2\\tau_1}{1+\\tau_1+\\rho_1}\\frac{2\\tau_2}{1+\\tau_2+\\rho_2} \\leq PC \\leq \\frac{1+\\tau_1-|\\rho_1|}{1+\\tau_1+\\rho_1}\\frac{1+\\tau_2-|\\rho_2|}{1+\\tau_2+\\rho_2} \\] We have undertaken essentially the same operations as above except that now we are placing bounds on a substantive estimand of interest rather than first placing bounds on probative value of a clue and then turning to Bayes rule to place bounds on the estimand. 15.3.2 Moderator Consider now a situation in which our case is drawn from a set of cases for which \\(X\\) and \\(K\\) were each randomly assigned. Say then that the transition matrices, conditional on \\(K\\) look as follows: \\[P^{K=0}=\\left( \\begin{array}{cc} 0 &amp; 1 \\\\ 0.5 &amp; 0.5 \\end{array}\\right), P^{K=1}=\\left( \\begin{array}{cc} 1 &amp; 0 \\\\ 0 &amp; 1 \\end{array}\\right)\\] In this case we can now identify PC, even before observing \\(K\\). If \\(K=0\\), PC is 0there are no cases with positive effects in this condition. If \\(K=1\\) PC = 1. We have a prior that \\(K=1\\) of .5 and after observing \\(X=Y=1\\) we raise this to \\(2/3\\). Thus our prior belief on \\(PC\\)  before seeing \\(K\\) is \\(2/3 * 1 + 1/3 * 0 = 2/3\\). How about \\(\\phi_{b1}\\) and \\(\\phi_{d1}\\)? Here positive effects only arise when \\(K=1\\) and so \\(\\phi_{b1} = 1\\). \\(Y=1\\) without being cause by \\(X\\) only if \\(K=0\\) and so \\(\\phi_{b0} = 0\\). Thus we have a double decisive clue. 15.4 Causal discovery We start with a model with three variables, \\(X,M,Y\\) where \\(X\\) affects \\(Y\\) directly and indirectly through \\(M\\). We simulate data from this model  assuming monotonicity but otherwise a flat distribution on types, and then try to recover the structure from this model. In this case the data structure did not impose restrictions on the skeleton. The true graph can however be recovered with knowledge of the temporal ordering of variables. Next we consider the model in which X causes Y through M but not directly. In this case we have a restriction  specifically there is no arrow pointing directly from \\(X\\) to \\(Y\\). Again we impose monotonicity, draw data, and try to recover the model: Again we have the correct skeleton and knowledge of timing is enough to recover the graph. Finally we consider the model in which \\(Y\\) has two causes that do not influence each other. Again we impose monotonicity, draw data, and try to recover the model: 15.4.1 A model of models In the following mode there is an unknown, \\(Q\\), which determines the relevant causal model. If \\(Q=1\\) then we have \\(A \\rightarrow B \\rightarrow C2\\); if \\(Q=0\\) then \\(A \\rightarrow B \\leftarrow C1\\). In this case the temporal order of \\(C1\\) and \\(C2\\) is observable, so there is not confusion there; what is not clear however is which is the important node to include in the model. model &lt;- make_model(&quot;A -&gt; B -&gt; C2 &lt;- C1 -&gt; B &lt;- Q -&gt; C2&quot;) %&gt;% # These restrictions capture the role of Q in turning parentage on or off set_restrictions(c( &quot;(B[C1=1, Q=1] != B[C1=0, Q=1])&quot;, &quot;(C2[B=1, Q=0] != C2[B=0, Q=0])&quot;)) %&gt;% # These restrictions are for simplification: monotonicity and complementarity set_restrictions(c( &quot;(C2[B=1] &lt; C2[B=0])&quot;, &quot;(C2[C1=1] &lt; C2[C1=0])&quot;, &quot;(B[A=1] &lt; B[A=0])&quot;, &quot;(B[C1=1] &lt; B[C1=0])&quot;, &quot;((B[A=1, C1=1] - B[A=0, C1=1]) &lt; (B[A=1, C1=0] - B[A=0, C1=0]))&quot;)) model ## ## Statement: ## [1] &quot;A -&gt; B -&gt; C2 &lt;- C1 -&gt; B &lt;- Q -&gt; C2&quot; ## ## DAG: ## parent children ## 1 A B ## 3 C1 B ## 4 C1 C2 ## 5 Q B ## 6 Q C2 ## 2 B C2 ## ## ------------------------------------------------------------------------------------------ ## ## Nodal types: ## $A ## 0 1 ## ## node position display interpretation ## 1 A NA A0 A = 0 ## 2 A NA A1 A = 1 ## ## $C1 ## 0 1 ## ## node position display interpretation ## 1 C1 NA C10 C1 = 0 ## 2 C1 NA C11 C1 = 1 ## ## $Q ## 0 1 ## ## node position display interpretation ## 1 Q NA Q0 Q = 0 ## 2 Q NA Q1 Q = 1 ## ## $B ## 00000000 10000000 01000000 11000000 00100000 10100000 01100000 11100000 00010000 10010000 01010000 11010000 00110000 10110000 01110000 11110000240 nodal types omitted ## ## node position display interpretation ## 1 B 1 B[*]******* B | A = 0 &amp; C1 = 0 &amp; Q = 0 ## 2 B 2 B*[*]****** B | A = 1 &amp; C1 = 0 &amp; Q = 0 ## 3 B 3 B**[*]***** B | A = 0 &amp; C1 = 1 &amp; Q = 0 ## 4 B 4 B***[*]**** B | A = 1 &amp; C1 = 1 &amp; Q = 0 ## 5 B 5 B****[*]*** B | A = 0 &amp; C1 = 0 &amp; Q = 1 ## 6 B 6 B*****[*]** B | A = 1 &amp; C1 = 0 &amp; Q = 1 ## 7 B 7 B******[*]* B | A = 0 &amp; C1 = 1 &amp; Q = 1 ## 8 B 8 B*******[*] B | A = 1 &amp; C1 = 1 &amp; Q = 1 ## ## $C2 ## 00000000 10000000 01000000 11000000 00100000 10100000 01100000 11100000 00010000 10010000 01010000 11010000 00110000 10110000 01110000 11110000240 nodal types omitted ## ## node position display interpretation ## 1 C2 1 C2[*]******* C2 | C1 = 0 &amp; Q = 0 &amp; B = 0 ## 2 C2 2 C2*[*]****** C2 | C1 = 1 &amp; Q = 0 &amp; B = 0 ## 3 C2 3 C2**[*]***** C2 | C1 = 0 &amp; Q = 1 &amp; B = 0 ## 4 C2 4 C2***[*]**** C2 | C1 = 1 &amp; Q = 1 &amp; B = 0 ## 5 C2 5 C2****[*]*** C2 | C1 = 0 &amp; Q = 0 &amp; B = 1 ## 6 C2 6 C2*****[*]** C2 | C1 = 1 &amp; Q = 0 &amp; B = 1 ## 7 C2 7 C2******[*]* C2 | C1 = 0 &amp; Q = 1 &amp; B = 1 ## 8 C2 8 C2*******[*] C2 | C1 = 1 &amp; Q = 1 &amp; B = 1 ## ## ## Number of types by node ## A C1 Q B C2 ## 2 2 2 256 256 ## ## Number of unit types: 524288 ## ## ------------------------------------------------------------------------------------------ ## ## Restrictions: ## A: 0 restricted types ## C1: 0 restricted types ## Q: 0 restricted types ## B: 0 restricted types ## C2: 0 restricted types plot(model) if(do_diagnosis){ model_Q0 &lt;- set_parameters(model, node = &quot;Q&quot;, alphas = c(1,0)) model_Q1 &lt;- set_parameters(model, node = &quot;Q&quot;, alphas = c(0,1)) data_0 &lt;- make_data(model_Q0, 100, vars = c(&quot;A&quot;, &quot;B&quot;, &quot;C1&quot;, &quot;C2&quot;)) data_1 &lt;- make_data(model_Q1, 100, vars = c(&quot;A&quot;, &quot;B&quot;, &quot;C1&quot;, &quot;C2&quot;)) model_Q0 &lt;- update_model(model, data_0) model_Q1 &lt;- update_model(model, data_1) Qu0 &lt;- query_model(model_Q0, &quot;Q==1&quot;, using = &quot;posteriors&quot;) Qu1 &lt;- query_model(model_Q1, &quot;Q==1&quot;, using = &quot;posteriors&quot;) write_rds(list(model_Q0, model_Q1, Qu0, Qu1), &quot;saved/ch14_Qornot.rds&quot;) } Qornot &lt;- read_rds(&quot;saved/ch14_Qornot.rds&quot;) kable(Qornot[[3]]) Query Given Using mean sd Q 1 - posteriors 0.265 0.176 kable(Qornot[[4]]) Query Given Using mean sd Q 1 - posteriors 0.579 0.18 [Ideally here however \\(\\lambda^Q\\) is either 0 or 1  we want to know which world we are in] References "]]
