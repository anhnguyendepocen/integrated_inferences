[
["examplesappendix.html", "Chapter 17 Analysis of canonical models with gbiqq 17.1 A simple model and the ladder of causation 17.2 \\(X\\) causes \\(Y\\), with unmodelled confounding 17.3 An \\(X\\) causes \\(Y\\), with confounding modeled 17.4 Illustration of the backdoor criterion 17.5 Simple mediation model 17.6 Simple moderator model 17.7 Billy and Suzy’s moderator and mediation model 17.8 An IV model 17.9 An illustration of identification through the frontdoor 17.10 A model with a violation of sequential ignorability 17.11 Learning from a collider 17.12 Inferring a cause from symptoms 17.13 A model mixing observational and experimental data 17.14 Simple sample selection bias 17.15 Sample selection bias 17.16 Transportation of findings across contexts", " Chapter 17 Analysis of canonical models with gbiqq We walk through a set of canonical models and show how to define and analyze them using gbiqq. 17.1 A simple model and the ladder of causation We first introduce a simple \\(X\\) causes \\(Y\\) model with no confounding and use this to illustrate the “ladder of causation.” The model is written: model &lt;- make_model(&quot;X -&gt; Y&quot;) plot_dag(model) We will assume a “true” distribution over parameters. Let’s assume that the true effect of 0.5, but that this is not known to researchers. The .5 effect comes from the difference between the share of units with a positive effect (.6) and those with a negative effect (.1). (We say share but we may as well think in terms of the probability that a given unit is of one or other type.) model &lt;- set_parameters(model, node = &quot;Y&quot;, alphas = c(.2, .1, .6, .1)) kable(t(get_parameters(model))) X.X0 X.X1 Y.Y00 Y.Y10 Y.Y01 Y.Y11 0.5 0.5 0.2 0.1 0.6 0.1 We can now simulate data using the model: data &lt;- simulate_data(model, n = 1000) With a model and data in hand we can now update the model. updated &lt;- gbiqq(model, data) From the updated model we can draw posterior inferences over estimands of interest. We will imagine three estimands, corresponding to Pearl’s “ladder of causation.” At the first level we are interested in the distribution of some node, perhaps given the value of another node. This question is answerable from observational data. At the second level we are interested in treatment effects: how changing one node changes another. This question is answerable from experimental data. At the third level we are interested in counterfactual statements: how would things have been different if some features of the world were different from what they are? Answering this question requires a causal model. Here are the results: results &lt;- gbiqq::query_model( updated, queries = list(&quot;Y | X=1&quot; = &quot;Y&quot;, ATE = &quot;Y[X=1] - Y[X=0]&quot;, PC = &quot;Y[X=1] &gt; Y[X=0]&quot;), subsets = c(TRUE, TRUE, &quot;X==1 &amp; Y==1&quot;), using = &quot;posteriors&quot;) Query (rung) Query Subset Using mean sd Association Y | X=1 All posteriors 0.49 0.02 Intervention ATE All posteriors 0.52 0.03 Imagining PC X==1 &amp; Y==1 posteriors 0.82 0.08 We see from the posterior variance on PC that we have the greatest difficulty with the third rung. In particular the PC is not identified (the distribution does not tighten even with very large N). For more intuition we graph the posteriors: We find that they do not converge but they do place positive mass in the right range. Within this range, the shape of the posterior depends on the priors only. 17.2 \\(X\\) causes \\(Y\\), with unmodelled confounding An \\(X\\) causes \\(Y\\) model with confounding can be written: model &lt;- make_model(&quot;X -&gt; Y; X &lt;-&gt; Y&quot;) plot_dag(model) If we look at the parameter matrix implied by this model we see that it has more parameters than nodal types, reflecting the joint assignment probabilities of \\(\\theta_X\\) and \\(\\theta_Y\\). Here we have parameters for \\(\\Pr(\\theta_X=x)\\) and \\(\\Pr(\\theta_Y |\\theta_X=x)\\), which allow us to represent \\(\\Pr(\\theta_X, \\theta_Y)\\) via \\(\\Pr(\\theta_X=x)\\Pr(\\theta_Y |\\theta_X=x)\\). Table 17.1: Parameter matrix for X causes Y model with arbitrary confounding X0.Y00 X1.Y00 X0.Y10 X1.Y10 X0.Y01 X1.Y01 X0.Y11 X1.Y11 Y-1.Y00 0 1 0 0 0 0 0 0 Y-1.Y10 0 0 0 1 0 0 0 0 Y-1.Y01 0 0 0 0 0 1 0 0 Y-1.Y11 0 0 0 0 0 0 0 1 X.X0 1 0 1 0 1 0 1 0 X.X1 0 1 0 1 0 1 0 1 Y-0.Y00 1 0 0 0 0 0 0 0 Y-0.Y10 0 0 1 0 0 0 0 0 Y-0.Y01 0 0 0 0 1 0 0 0 Y-0.Y11 0 0 0 0 0 0 1 0 With the possibility of any type of confounding, the best we can do is place “Manski bounds” on the average causal effect. To see this, let’s plot a histogram of our posterior on average causal effects, given lots of data. We will assume here that in truth there is no confounding, but that that is not known to researchers. data5000 &lt;- simulate_data( model, n = 5000, parameters = c(.25, .0, .5, .25, .5, .5, .25, 0, .5, .25)) data100 &lt;- data5000[sample(5000, 100), ] ## Prior distribution added to model Figure 17.1: Modest gains from additional data when ATE is not identified The key thing here is that the posterior on the ATE has shifted, as it should, but it is not tight, even with large data. In fact the distribution of the posterior covers one unit of the range between -1 and 1. 17.3 An \\(X\\) causes \\(Y\\), with confounding modeled Say now we have a theory that the relationship between \\(X\\) and \\(Y\\) is confounded by possibly unobserved variable \\(C\\). Although \\(C\\) is unobserved we can still include it in the model and observe the confounding it generates by estimating the model on data generated by the model but assuming that we cannot observe \\(C\\). model &lt;- make_model(&quot;C -&gt; X -&gt; Y &lt;- C&quot;) %&gt;% set_restrictions(c( &quot;(Y[X=1] &lt; Y[X=0]) | (Y[C=1] &lt; Y[C=0])&quot;, &quot;(X[C=1] &lt; X[C=0])&quot;)) %&gt;% set_parameters(type = &quot;prior_mean&quot;) The ATE estimand in this case is given by: Query Subset Using mean ATE All parameters 0.333 In the first column below we run a regression using data generated from this model but with \\(C\\) unobserved. The second column shows what we would estimate if were able to observe \\(C\\). Dependent variable: Y (1) (2) X 0.449*** 0.341*** (0.009) (0.009) C 0.322*** (0.009) Constant 0.278*** 0.171*** (0.006) (0.007) Observations 10,000 10,000 R2 0.201 0.293 Adjusted R2 0.201 0.293 Residual Std. Error 0.447 (df = 9998) 0.420 (df = 9997) F Statistic 2,516.452*** (df = 1; 9998) 2,071.749*** (df = 2; 9997) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 Our posteriors over the effect of \\(X\\) on \\(Y\\) and the effect of the unobserved confounder (\\(C\\)) on \\(Y\\) have a joint distributed with negative covariance. To illustrate we will use the same data but assume priors from model where we do not restrict the relationship between \\(C\\) and \\(Y\\) and show the joint distribution of our posteriors. model &lt;- make_model(&quot;C -&gt; X -&gt; Y &lt;- C&quot;) %&gt;% set_restrictions(&quot;(X[C=1] &lt; X[C=0])&quot;) ate &lt;- read_rds(&quot;saved/appendix_modelled_confound_ate.rds&quot;) confound &lt;- read_rds(&quot;saved/appendix_modelled_confound_confound.rds&quot;) plot(ate, confound) abline(lm(confound~ate), col = &quot;red&quot;) 17.4 Illustration of the backdoor criterion We can use the same model to illustrate the backdoor criterion. We want to show that estimates of the treatment effect are identified if we have data on \\(C\\) but not otherwise. model &lt;- make_model(&quot;C -&gt; X -&gt; Y &lt;- C&quot;) %&gt;% set_parameters(type = &quot;prior_mean&quot;) %&gt;% set_restrictions(&quot;(Y[C=1]&lt;Y[C=0])&quot;) # Four types of data N &lt;- 10000 df_close_large &lt;- simulate_data(model, n = N) df_open_large &lt;- mutate(data_1_large, C = NA) df_close_small &lt;- data_1_large[sample(N, 200), ] df_open_small &lt;- data_2_large[sample(N, 200), ] We see that with small \\(n\\) (200 units), closing the backdoor (by including data on \\(C\\)) produces a tighter distribution on the ATE. With large \\(N\\) (10,000 units) the distribution around the estimand collapses when the backdoor is closed but not when it is open. 17.5 Simple mediation model We define a simple mediation model and illustrate learning about whether \\(X=1\\) caused \\(Y=1\\) from observations of \\(M\\). model &lt;- make_model(&quot;X -&gt; M -&gt; Y&quot;) %&gt;% set_confound(confound = list(X = &quot;M[X=1]==1&quot;)) %&gt;% set_parameters(node = &quot;X&quot;, alphas = c(.2, .8, .8, .2)) %&gt;% set_parameters(node = &quot;M&quot;, alphas = c(.2, 0, .8, 0)) %&gt;% set_parameters(node = &quot;Y&quot;, alphas = c(.2, 0, .8, 0)) #FLAG check code on confound alphas setting # confound = &quot;M[X=1]=1&quot;, plot_dag(model) Data and estimation: data &lt;- simulate_data(model, n = 1000, using = &quot;parameters&quot;) updated &lt;- gbiqq(model, data) result &lt;- gbiqq::query_model( updated, queries = list(COE = &quot;c(Y[X=1] &gt; Y[X=0])&quot;), subsets = c(&quot;X==1 &amp; Y==1&quot;, &quot;X==1 &amp; Y==1 &amp; M==0&quot;, &quot;X==1 &amp; Y==1 &amp; M==1&quot;), using = &quot;posteriors&quot;) Query Subset Using mean sd COE X==1 &amp; Y==1 posteriors 0.591 0.203 COE X==1 &amp; Y==1 &amp; M==0 posteriors 0.005 0.007 COE X==1 &amp; Y==1 &amp; M==1 posteriors 0.591 0.203 Note that observation of \\(M=0\\) results in a 0 probability for the posterior that \\(X\\) caused \\(Y\\), while observation of \\(M=1\\) has only a modest positive effect. The mediator thus provides a hoop test for the proposition that \\(X\\) caused \\(Y\\). 17.6 Simple moderator model We define a simple model with a moderator and illustrate how updating about COE is possible using the value of a mediator as a clue. model &lt;- make_model(&quot;X -&gt; Y; Z -&gt; Y&quot;) plot_dag(model) data &lt;- simulate_data( model, n = 1000, parameters = c(.5, .5, .5, .5, .02, .02, .02, .02, .02, .02, .02, .02, .02, .70, .02, .02, .02, .02, .02, .02)) posterior &lt;- gbiqq(model, data) result &lt;- gbiqq::query_model( updated, queries = list(COE = &quot;Y[X=1] &gt; Y[X=0]&quot;), subsets = list(&quot;X==1 &amp; Y==1&quot;, &quot;X==1 &amp; Y==1 &amp; Z==0&quot;, &quot;X==1 &amp; Y==1 &amp; Z==1&quot;), using = &quot;posteriors&quot;) Query Subset Using mean sd COE X==1 &amp; Y==1 posteriors 0.811 0.040 COE X==1 &amp; Y==1 &amp; Z==0 posteriors 0.404 0.143 COE X==1 &amp; Y==1 &amp; Z==1 posteriors 0.899 0.031 As an exercise, define a model where, learning about a model with moderators allows you to tighten bounds on COE even without observing the value of the mediator. 17.7 Billy and Suzy’s moderator and mediation model We can describe a simple version of the Billy and Suzy stone throwing game as a model with moderation and mediation in three nodes. model &lt;- make_model(&quot;Suzy -&gt; Billy -&gt; Smash &lt;- Suzy&quot;) %&gt;% set_restrictions(c( # If Suzy throws the bottle breaks &quot;(Smash[Suzy=1]==0)&quot;, # The bottle won&#39;t break by itself &quot;(Smash[Billy=0, Suzy = 0]==1)&quot;, # Suzy&#39;s throw doesn&#39;t *encourage* Billy to throw &quot;Billy[Suzy=1]&gt;Billy[Suzy=0]&quot;)) plot_dag(model) Here “Suzy” means Suzy throws, “Billy”: means Billy throws—which he might not do if Suzy throws—and “Smash” means the bottle gets smashed. The version here is a somewhat less deterministic version of the classic account. Suzy is still an ace shot but now she may or may not throw and Billy may or may not respond positively to Suzy and if he does respond he may or may not be successful. With all these possibilities we have twelve unit causal types instead of 1. We have two estimands of interest: counterfactual causation and actual causation. Conditional on Suzy throwing and the bottle breaking, would the bottle not have broken had Suzy not thrown her stone. That’s counterfactual causation. The actual causation asks the same question but conditioning on the fact that Billy did or did not thrown his stone—which we know could itself be due to Suzy throwing her stone. If so then we might think of an “active path” from Suzy’s throw to the smashing, even though had she not thrown the bottle would have smashed anyhow. Our results: actual_cause &lt;- query_model(model, using = &quot;priors&quot;, queries = c( Counterfactual = &quot;Smash[Suzy = 1] &gt; Smash[Suzy = 0]&quot;, Actual = &quot;Smash[Suzy = 1, Billy = Billy[Suzy = 1] ] &gt; Smash[Suzy = 0, Billy = Billy[Suzy = 1]]&quot;), subsets = c(&quot;Suzy==1 &amp; Smash==1&quot;, &quot;Suzy==1 &amp; Smash==1 &amp; Billy==0&quot;, &quot;Suzy==1 &amp; Smash==1 &amp; Billy==1&quot;), expand_grid = TRUE ) Query Subset Using mean sd Counterfactual Suzy==1 &amp; Smash==1 priors 0.667 0.237 Counterfactual Suzy==1 &amp; Smash==1 &amp; Billy==0 priors 0.748 0.221 Counterfactual Suzy==1 &amp; Smash==1 &amp; Billy==1 priors 0.504 0.286 Actual Suzy==1 &amp; Smash==1 priors 0.834 0.170 Actual Suzy==1 &amp; Smash==1 &amp; Billy==0 priors 1.000 0.000 Actual Suzy==1 &amp; Smash==1 &amp; Billy==1 priors 0.504 0.286 Our inferences, without even observing Billy’s throw distinguish between Suzy being a counterfactual cause and an actual cause. We think it likely that Suzy’s throw was an actual cause of the outcome though we are less sure that it was a counterfactual causes. Observing Billy’s throw strengthens our inferences. If Billy didn’t throw then we are sure Suzy’s throw was the actual cause, though we are still in doubt about whether her throw was a counterfactual cause. Note that if we observed Suzy not throwing then we would learn more about whether she would be a counterfactual cause since we would have learned more about whether Billy reacts to her and also about whether Billy is a good shot. Query Subset Using mean sd Counterfactual Suzy==0 &amp; Billy==0 priors 1.000 0.000 Counterfactual Suzy==0 &amp; Billy==1 priors 0.503 0.286 Counterfactual Suzy==0 &amp; Billy==1 &amp; Smash==1 priors 0.000 0.000 Actual Suzy==0 &amp; Billy==0 priors 1.000 0.000 Actual Suzy==0 &amp; Billy==1 priors 0.752 0.216 Actual Suzy==0 &amp; Billy==1 &amp; Smash==1 priors 0.499 0.285 17.8 An IV model We define a simple mediation model and illustrate learning about whether \\(X=1\\) caused \\(Y=1\\) from observations of \\(M\\). model &lt;- make_model(&quot;X -&gt; M -&gt; Y&quot;) %&gt;% set_confound(confound = list(M = &quot;Y[M=1]==1&quot;)) plot_dag(model) result &lt;- gbiqq::query_model( updated, queries = list(ATE = &quot;c(Y[M=1] - Y[M=0])&quot;), subsets = list(TRUE, &quot;M[X=1] &gt; M[X=0]&quot;, &quot;M==0&quot;, &quot;M==1&quot;), using = &quot;posteriors&quot;) Query Subset Using mean sd ATE All posteriors 0.355 0.056 ATE M[X=1] &gt; M[X=0] posteriors 0.331 0.051 ATE M==0 posteriors 0.341 0.085 ATE M==1 posteriors 0.368 0.040 We calculate the average causal effect for all and for the compliers and conditional on values of \\(M\\). 17.9 An illustration of identification through the frontdoor Consider the following model: frontdoor &lt;- make_model(&quot;X -&gt; M -&gt; Y&quot;) %&gt;% set_confound(list(X = &quot;Y[M=1]&gt;Y[M=0]&quot;, X = &quot;Y[M=1]&lt;Y[M=0]&quot;)) plot_dag(frontdoor) FLAG (fix confound arrows) Below we plot posterior distributions given observations on 2000 units, with and without data on \\(M\\): 17.10 A model with a violation of sequential ignorability 17.11 Learning from a collider Pearl describes a model similar to the following as a case for which controlling for covariate \\(W\\) induces bias in the estimation of the effect of \\(X\\) on \\(Y\\), which could otherwise be estimated without bias. model &lt;- make_model(&quot;X -&gt; Y &lt;- S; S -&gt; W&quot;) %&gt;% set_confound(list(X = &quot;W[S=1]&gt;W[S=0]&quot;)) %&gt;% set_parameters(parameters = c(.1, .9, .5, .5, .9, .1, .1,.1,.7,.1, .2, 0,0,0, 0,0,0,0, .6,0,0,0, 0,0,0,.2)) plot_dag(model) data &lt;- simulate_data(model, n = 20000) data$S &lt;- NA The true effect of \\(X\\) on \\(Y\\) is .3 but the PC is quite different for units with \\(W=0\\) and \\(W=1\\): Query Subset Using mean Y(1)-Y(0) All parameters 0.300 Y(1)-Y(0) X==1 &amp; Y==1 parameters 0.600 Y(1)-Y(0) X==1 &amp; Y==1 &amp; W==0 parameters 0.083 Y(1)-Y(0) X==1 &amp; Y==1 &amp; W==1 parameters 0.744 These are the quantities we seek to recover. The ATE can be gotten fairly precisely in a simple regression. But controlling for \\(W\\) introduces bias both for the unconditional and the conditional effects of \\(X\\): Dependent variable: Y (1) (2) (3) X 0.298*** 0.290*** 0.024*** (0.007) (0.006) (0.009) W 0.368*** 0.010 (0.006) (0.010) X:W 0.543*** (0.012) Constant 0.207*** 0.030*** 0.202*** (0.006) (0.006) (0.007) Observations 20,000 20,000 20,000 R2 0.083 0.223 0.292 Adjusted R2 0.083 0.223 0.292 Residual Std. Error 0.470 (df = 19998) 0.432 (df = 19997) 0.413 (df = 19996) F Statistic 1,806.291*** (df = 1; 19998) 2,873.453*** (df = 2; 19997) 2,751.279*** (df = 3; 19996) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 How does the Bayesian model do, with and without data on \\(W\\)? Inferences that do not use \\(W\\) get ATE right on average, but PC is not identified and statements about PC conditional on \\(W\\) are not possible: Without \\(W\\): Table 17.2: Collider excluded from model Query Subset Using mean sd Y(1)-Y(0) All posteriors 0.000 0.124 Y(1)-Y(0) X==1 &amp; Y==1 posteriors 0.500 0.119 Y(1)-Y(0) X==1 &amp; Y==1 &amp; W==0 posteriors 0.500 0.137 Y(1)-Y(0) X==1 &amp; Y==1 &amp; W==1 posteriors 0.501 0.121 We see including the collider does not induce error in estimation of the ATE, even though it does in a regression framework. It provides an ability to make different PC case level claims given W, but these are nevertheless far off in this example because we still do not have identification. With \\(W\\): Table 17.3: Collider included in model Query Subset Using mean sd Y(1)-Y(0) All posteriors -0.001 0.123 Y(1)-Y(0) X==1 &amp; Y==1 posteriors 0.499 0.120 Y(1)-Y(0) X==1 &amp; Y==1 &amp; W==0 posteriors 0.499 0.147 Y(1)-Y(0) X==1 &amp; Y==1 &amp; W==1 posteriors 0.499 0.121 17.12 Inferring a cause from symptoms Sometimes we want to know whether a particular condition was present that could have caused an observed outcome. This is the stuff of medical diagnosis: on observing symptoms, is the sickness due to \\(A\\) or to \\(B\\)? We imagine cases in which we do not get to observe the putative cause directly and we want to infer both whether the putative cause was present and whether it caused the outcome. This requires stating a query on both an effect and the level of an unobserved node. An illustration: model &lt;- make_model(&quot;A -&gt; S -&gt; Y &lt;- B&quot;) %&gt;% set_restrictions(c(&quot;(S[A=1]&lt; S[A=0])&quot;, &quot;(Y[S=1]&lt;Y[S=0])&quot;, &quot;(Y[S = 0, B = 0]== 1)&quot;)) query_model(model, queries = list(A=&quot;(Y[A=1] &gt; Y[A =0]) &amp; A==1&quot;, B=&quot;(Y[B=1] &gt; Y[B =0]) &amp; B==1&quot;), subsets = list(&quot;Y==1&quot;, &quot;Y==1 &amp; S==1&quot;), using = &quot;priors&quot;, expand_grid = TRUE) %&gt;% kable Query Subset Using mean sd A Y==1 priors 0.196 0.201 A Y==1 &amp; S==1 priors 0.251 0.228 B Y==1 priors 0.433 0.264 B Y==1 &amp; S==1 priors 0.283 0.223 In this example there are two possible causes of interest, \\(A\\) and \\(B\\). With flat priors the \\(B\\) path starts as more probable. Observation of symptom \\(S\\), which is a consequence of \\(A\\), however raises the chances that the outcome is due to \\(A\\) and lowers the chances that it is due to \\(B\\). 17.13 A model mixing observational and experimental data We imagine that node \\(R\\) indicates whether a unit was assigned to be randomly assigned to treatment assignment (\\(X=Z\\) if \\(R=1\\)) or took on its observational value (\\(X=O\\) if \\(R=0\\)). We assume the exclusion restriction that entering the experimental sample is not related to \\(Y\\) other than through assignment of \\(X\\). model &lt;- make_model(&quot;R -&gt; X; O -&gt;X; Z -&gt; X; X -&gt; Y&quot;) %&gt;% set_restrictions(&quot;(X[R=1, Z=0]!=0) | (X[R=1, Z=1]!=1) | (X[R=0, O=0]!=0) | (X[R=0, O=1]!=1)&quot;) %&gt;% set_priors(distribution = &quot;uniform&quot;) %&gt;% set_confound(list(O = &quot;(Y[X=1] &gt; Y[X=0])&quot;, O = &quot;(Y[X=1] &lt; Y[X=0])&quot;, O = &quot;(Y[X=1] == 1) &amp; (Y[X=0] == 1)&quot;)) plot_dag(model) The parameter matrix has just one type for \\(X\\) since \\(X\\) really operates here as a kind of switch, inheriting the value of \\(Z\\) or \\(O\\) depending on \\(R\\). Parameters allow for complete confounding between \\(O\\) and \\(Y\\) by \\(Z\\) and \\(Y\\) are unconfounded. We imagine parameter values in which there is a true .2 effect of \\(X\\) on \\(Y\\) and in which observational assignment is more likely if \\(X\\) causes \\(Y\\) of if \\(Y=1\\) regardless. model &lt;- set_parameters(model, confound = list( O = &quot;(Y[X=1] == 0) &amp; (Y[X=0] == 0)&quot;, O = &quot;(Y[X=1] &gt; Y[X=0])&quot;, O = &quot;(Y[X=1] &lt; Y[X=0])&quot;, O = &quot;(Y[X=1] == 1) &amp; (Y[X=0] == 1)&quot;), alpha = list(c(.8,.2), c(.2,.8), c(.8,.2), c(.2,.8))) %&gt;% set_parameters(node = &quot;Y&quot;, alpha = c(.2, .2, .4, .2)) The estimands: Query Subset Using mean ATE All parameters 0.2 ATE R==0 parameters 0.2 ATE R==1 parameters 0.2 The priors: Query Subset Using mean sd ATE All priors -0.005 0.318 ATE R==0 priors -0.005 0.318 ATE R==1 priors -0.005 0.318 Data: data &lt;- simulate_data(model, n = 600) # Uncomment if data on $O$ is not available for cases assigned to $R=1$. # data$O[data$R == 1] &lt;- NA The true effect is .2 but naive analysis on the observational data would yield a strongly upwardly biased estimate. The gbiqq estimates are: posterior &lt;- gbiqq(model, data) Query Subset Using mean sd ATE All posteriors -0.086 0.045 ATE R==0 posteriors -0.086 0.045 ATE R==1 posteriors -0.086 0.045 Did observational data improve the estimates from the experimental data? posterior &lt;- gbiqq(model, data[data$R==1,]) Query Subset Using mean sd ATE All posteriors 0.057 0.229 ATE R==0 posteriors 0.057 0.229 ATE R==1 posteriors 0.057 0.229 A key quantity of interest from this model is the average effect of treatment conditional on being in treatment in the observational group. We have: Query Subset Using mean sd ATE R==1 &amp; X==0 posteriors -0.086 0.045 ATE R==1 &amp; X==1 posteriors -0.086 0.045 ATE R==0 &amp; X==0 posteriors -0.500 0.055 ATE R==0 &amp; X==1 posteriors 0.375 0.065 17.14 Simple sample selection bias Say we are interested in assessing the share of Republicans in a population but Republicans are (possible) systematically likely to be absent from our sample. What inferences can we make given our sample? We will assume that we know when we have missing data though of course we do not know the value of the missing data. To tackle the problem we will include sample selection into our model: model &lt;- make_model(&quot;R -&gt; S&quot;) %&gt;% set_parameters(node = c(&quot;R&quot;, &quot;S&quot;), alphas = list(c(2,1), c(1, 0, 1, 1))) data &lt;- simulate_data(model, n = 1000) %&gt;% mutate(R = ifelse(S==0, NA, R )) From this data and model, the priors and posteriors for population and sample quantities are: Query Subset Using mean sd Q 1 All parameters 0.333 NA Q 1 All priors 0.498 0.292 Q 1 All posteriors 0.503 0.135 Q 1 S==1 parameters 0.500 NA Q 1 S==1 priors 0.499 0.309 Q 1 S==1 posteriors 0.498 0.023 Importan tly we wo uld not do so well if our data did not indicate that we had missingness. Query Subset Using mean sd Q 1 All parameters 0.333 NA Q 1 All posteriors 0.484 0.007 Q 1 S==1 parameters 0.500 NA Q 1 S==1 posteriors 0.484 0.007 We naively conclude that all cases are sampled and that population effects are the same as sample effects. 17.15 Sample selection bias As an example consider the below from Bareinboim and Pearl (2016) (their Figure 4C). The key feature is that data is only seen for units with \\(S=1\\). In this model the relationship between \\(X\\) and \\(Y\\) is confounded. Controlling for either \\(Z\\) or for \\(W1\\) and \\(W2\\) can address this confounding, but only controlling for \\(Z\\) can capture sample selection. The reason is that \\(Z\\) is independent of \\(S\\) and so variation in \\(Z\\) is not affected by selection on \\(S\\). selection &lt;- make_model(&quot;X &lt;- W1 -&gt; W2 -&gt; X -&gt; Y &lt;- Z -&gt; W2; W1 -&gt; S&quot;) To keep the parameter and type space small we also impose a set of restrictions: \\(S\\) is non decreasing in \\(W_1\\), \\(X\\) is not decreasing in either \\(W1\\) or \\(W2\\), \\(Y\\) is not decreasing \\(Z\\) or \\(X\\) and \\(X\\) affects \\(Y\\) only if \\(Z=1\\). \\(W_2=1\\) if and only if both \\(W_1=1\\) and \\(Z=1\\). These all reduce the problem to one with 18 nodal types and 288 causal types. Worth noting that in this model although selection is related to patterns of confounding, it is not related to causal effects: the effect of \\(X\\) on \\(Y\\) is not different from units that are or are not selected. Given these priors we will assume a true (unknown) dgp with no effect of \\(X\\) on \\(Y\\), in which \\(W_1\\) arises with a \\(1/3\\) probability but has a strong positive effect on selection into the sample when it does arise. The estimand values given the true parameters and priors for this model are as shown below. Table 17.4: Estimand values Query Subset Using mean sd Q 1 All parameters 0.000 NA Q 1 All priors 0.333 0.154 This con firms a z ero true effe ct, thou gh priors are dispersed centered on a positive effect. We can see the inference challenge from observational data using regression analysis with and without conditioning on \\(Z\\) and \\(W_1, W_2\\). Dependent variable: Y (1) (2) (3) X 0.079*** -0.002 0.056*** (0.008) (0.008) (0.016) X:Z_norm -0.006 (0.016) X:W1_norm 0.141*** (0.030) X:W2_norm 0.042 (0.034) Observations 14,868 14,868 14,868 R2 0.006 0.113 0.016 Adjusted R2 0.006 0.113 0.016 Residual Std. Error 0.498 (df = 14866) 0.471 (df = 14864) 0.496 (df = 14862) F Statistic 91.879*** (df = 1; 14866) 629.790*** (df = 3; 14864) 47.843*** (df = 5; 14862) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 Naive analysis is far off; but even after conditioning on \\(Z\\) we still wrongly infer a positive effect. Bayesian inferences given different data strategies are shown below: data mean sd X,Y 0.069 0.014 X,Y, W1, W2 0.018 0.008 X, Y, Z 0.011 0.005 We see the best performance is achieved for the model with data on \\(Z\\)—in this case the mean posterior estimate is closest to the truth–0–and the standard deviation is lowest also. 17.16 Transportation of findings across contexts We study the effect of \\(X\\) on \\(Y\\) in country 1 and want to make inferences to country 2, Our problem however is that units are heterogeneous and features, \\(W_1\\), that differ across units may be related both to treatment assignment, outcomes, and selection into the sample. model &lt;- make_model(&quot;R -&gt; X; O -&gt; X; S -&gt; X -&gt; Y &lt;- Z &lt;- S&quot;) %&gt;% set_restrictions(labels = list(X = &quot;X01000111&quot;), keep = TRUE) %&gt;% set_restrictions(&quot;(Y[Z=1] &lt; Y[Z=0]) | (Y[X=1] &lt; Y[X=0])&quot;) %&gt;% set_confound(list(O = &quot;(Y[X=1] == Y[X=0])&quot;, Z = &quot;(O[Z=1] &gt; O[Z=0])&quot;)) kable(model$parameters_df) param_family param_set param_names param node parameters priors O O-1 O-1.O0 O0 O0 0.5000000 1 O O-1 O-1.O1 O1 O1 0.5000000 1 O O-0 O-0.O0 O0 O0 0.5000000 1 O O-0 O-0.O1 O1 O1 0.5000000 1 R R R.R0 R0 R0 0.5000000 1 R R R.R1 R1 R1 0.5000000 1 S S S.S0 S0 S0 0.5000000 1 S S S.S1 S1 S1 0.5000000 1 X X X.X01000111 X01000111 X01000111 1.0000000 1 Z Z-0 Z-0.Z00 Z00 Z00 0.2500000 1 Z Z-0 Z-0.Z10 Z10 Z10 0.2500000 1 Z Z-0 Z-0.Z01 Z01 Z01 0.2500000 1 Z Z-0 Z-0.Z11 Z11 Z11 0.2500000 1 Y Y Y.Y0000 Y0000 Y0000 0.1666667 1 Y Y Y.Y0001 Y0001 Y0001 0.1666667 1 Y Y Y.Y0101 Y0101 Y0101 0.1666667 1 Y Y Y.Y0011 Y0011 Y0011 0.1666667 1 Y Y Y.Y0111 Y0111 Y0111 0.1666667 1 Y Y Y.Y1111 Y1111 Y1111 0.1666667 1 plot_dag(model) # S is non randomized and has a possibly different distribution on Z. References "],
["references.html", "References", " References "]
]
